name: 'Build'

on:
  pull_request:
  push:
    branches:
      - 'master'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.welcome=never
  GPG_SEC: ${{ secrets.PGP_SEC }}
  GPG_PASSWORD: ${{ secrets.PGP_PASSWORD }}

jobs:
  build-native:
    name: 'Build native code (${{ matrix.jna-os-type }}-${{ matrix.jna-arch }})'
    runs-on: ${{ matrix.os }}
    env:
      CC: gcc
      CXX: g++
      CMAKE_BUILD_TYPE: Release
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}

    strategy:
      fail-fast: false
      matrix:
        jna-os-type: [ linux, win32, darwin ]
        jna-arch: [ x86, x86-64 ]
        include:
          - os: ubuntu-latest
            jna-os-type: linux
          - os: windows-latest
            jna-os-type: win32
          - os: macos-latest
            jna-os-type: darwin
          - jna-arch: x86
            action-platform: x86
            cflags: '-m32'
          - jna-arch: x86-64
            action-platform: x64
            cflags: '-m64'
        exclude:
          - jna-os-type: darwin
            jna-arch: x86

    steps:
      - name: Set up GCC
        if: ${{ runner.os == 'Linux' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: ${{ matrix.action-platform }}

      - name: Set up MinGW
        if: ${{ runner.os == 'Windows' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.action-platform }}

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Set up CMake environment
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo 'CMAKE_GENERATOR=MinGW Makefiles' >>${GITHUB_ENV}
        shell: bash

      - name: Report tool versions
        run: |
          echo '| `arch` | `uname -m` | CMake Version | GCC | GCC Version | GCC Target Architecture |' >>${GITHUB_STEP_SUMMARY}
          echo '|--------|------------|---------------|-----|-------------|-------------------------|' >>${GITHUB_STEP_SUMMARY}
          echo "|$(arch)|$(uname -m)|$(cmake --version | head -n1)|$(which gcc)|$(gcc --version | head -n1)|$(gcc -dumpmachine)|" >>${GITHUB_STEP_SUMMARY}
        shell: bash

      - name: Build sample source code
        run: |
          echo 'int main(int argc, char *argv[]) { return 0; }' >test.c
          echo -e 'cmake_minimum_required(VERSION 3.21)\nproject(test LANGUAGES C)\nset(CMAKE_C_STANDARD 23)\nadd_executable(test test.c)' >CMakeLists.txt
          cmake .
          cmake --build .
          file -b test{,.exe} 2>/dev/null | grep -vF 'No such file or directory'
        shell: bash
