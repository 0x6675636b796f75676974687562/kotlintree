name: 'Build'

on:
  pull_request:
  push:
    branches:
      - 'master'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.welcome=never
  GPG_SEC: ${{ secrets.PGP_SEC }}
  GPG_PASSWORD: ${{ secrets.PGP_PASSWORD }}

jobs:
  build-native:
    name: 'Build native code (${{ matrix.jna-os }}-${{ matrix.jna-arch }})'
    runs-on: ${{ matrix.os }}
    env:
      CC: gcc
      CXX: g++
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}
      CMAKE_BUILD_TYPE: Release
      CMAKE_COLOR_DIAGNOSTICS: ON

    strategy:
      fail-fast: false
      matrix:
        jna-os: [ linux, win32, darwin ]
        jna-arch: [ x86, x86-64 ]
        include:
          - os: ubuntu-latest
            jna-os: linux
          - os: windows-latest
            jna-os: win32
          - os: macos-latest
            jna-os: darwin
          - arch: x86
            jna-arch: x86
            cflags: '-m32'
          - arch: x64
            jna-arch: x86-64
            cflags: '-m64'
        exclude:
          - jna-os: darwin
            jna-arch: x86

    steps:
      - name: 'Set up GCC'
        if: ${{ runner.os == 'Linux' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: ${{ matrix.arch }}

      - name: 'Set up MinGW'
        id: 'mingw'
        if: ${{ runner.os == 'Windows' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.arch }}

      - name: 'Set up MinGW environment'
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo 'CC=${{ steps.mingw.outputs.gcc }}' >>${GITHUB_ENV}
          echo 'CXX=${{ steps.mingw.outputs.gxx }}' >>${GITHUB_ENV}
          echo 'CMAKE_GENERATOR=MinGW Makefiles' >>${GITHUB_ENV}
        shell: bash

      - name: 'Set up CMake'
        uses: lukka/get-cmake@latest

      - name: 'Report tool versions'
        run: |
          echo '| `arch` | `uname -m` | CMake Version | GCC | GCC Version | GCC Target Architecture |' >>${GITHUB_STEP_SUMMARY}
          echo '|--------|------------|---------------|-----|-------------|-------------------------|' >>${GITHUB_STEP_SUMMARY}
          echo "|$(arch)|$(uname -m)|$(cmake --version | head -n1)|$(which "${CC}")|$("${CC}" --version | head -n1)|$("${CC}" -dumpmachine)|" >>${GITHUB_STEP_SUMMARY}
        shell: bash

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: 'Build libtree-sitter.so'
        run: |
          cmake -S jna-lib/tree-sitter/ -B jna-lib/tree-sitter/build/
          cmake --build jna-lib/tree-sitter/build/
        shell: bash

      - name: 'Build libtree-sitter-cpp.so'
        # Try tu build `libtree-sitter-cpp.so` even if the previous step has failed.
        if: ${{ always() }}
        run: |
          cmake -S jna-lib/tree-sitter-cpp/ -B jna-lib/tree-sitter-cpp/build/
          cmake --build jna-lib/tree-sitter-cpp/build/
        shell: bash

      - name: 'Upload native libraries (libtree-sitter.so)'
        uses: actions/upload-artifact@v3
        with:
          name: 'libtree-sitter-${{ matrix.jna-os }}-${{ matrix.jna-arch }}'
          path: |
            jna-lib/tree-sitter/build/libtree-sitter*.so*
            jna-lib/tree-sitter/build/libtree-sitter*.dylib
            jna-lib/tree-sitter/build/tree-sitter*.dll
          if-no-files-found: error
          retention-days: 1

        # We put each file into the artifact separately, so that internal
        # directory structure remains flat (no relative paths get stored).
      - name: 'Upload native libraries (libtree-sitter-cpp.so)'
        uses: actions/upload-artifact@v3
        with:
          name: 'libtree-sitter-${{ matrix.jna-os }}-${{ matrix.jna-arch }}'
          path: |
            jna-lib/tree-sitter-cpp/build/libtree-sitter*.so*
            jna-lib/tree-sitter-cpp/build/libtree-sitter*.dylib
            jna-lib/tree-sitter-cpp/build/tree-sitter*.dll
          if-no-files-found: error
          retention-days: 1

  test:
    name: 'Run tests (${{ matrix.jna-os }}-${{ matrix.jna-arch }})'
    runs-on: ${{ matrix.os }}
    needs: build-native

    strategy:
      fail-fast: false
      matrix:
        jna-os: [ linux, win32, darwin ]
        jna-arch: [ x86, x86-64 ]
        include:
          - os: ubuntu-latest
            jna-os: linux
          - os: windows-latest
            jna-os: win32
          - os: macos-latest
            jna-os: darwin
          - arch: x86
            jna-arch: x86
          - arch: x64
            jna-arch: x86-64
        exclude:
          - jna-os: darwin
            jna-arch: x86

    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch Git tags, so that semantic version can be calculated.
          # Alternatively, run `git fetch --prune --unshallow --tags` as the
          # next step, see
          # https://github.com/actions/checkout/issues/206#issuecomment-607496604.
          fetch-depth: 0

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: 'jdk+fx'
          architecture: ${{ matrix.arch }}

      - name: 'Build sample source code'
        run: |
          java -version
        shell: bash

  build:
    name: 'Build Kotlin code'
    runs-on: ubuntu-latest
    needs: build-native

    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch Git tags, so that semantic version can be calculated.
          # Alternatively, run `git fetch --prune --unshallow --tags` as the
          # next step, see
          # https://github.com/actions/checkout/issues/206#issuecomment-607496604.
          fetch-depth: 0

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: 'jdk+fx'

  report:
    name: 'Publish JUnit test results (${{ matrix.jna-os }}-${{ matrix.jna-arch }})'
    if: ${{ always() }}
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jna-os: [ linux, win32, darwin ]
        jna-arch: [ x86, x86-64 ]
        exclude:
          - jna-os: darwin
            jna-arch: x86

    permissions:
      checks: write
      pull-requests: write

    steps:
        # Uses Docker, that's why Linux-only.
      - name: 'JUnit Tests (EnricoMi/publish-unit-test-result-action)'
        run: |
          echo ''
        shell: bash
