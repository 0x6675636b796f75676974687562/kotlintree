name: 'Build'

on:
  pull_request:
  push:
    branches:
      - 'master'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.welcome=never
  GPG_SEC: ${{ secrets.PGP_SEC }}
  GPG_PASSWORD: ${{ secrets.PGP_PASSWORD }}

jobs:
  build-native:
    name: 'Build native code (${{ matrix.os }}/${{ matrix.action-platform }}, ${{ matrix.jna-os-type }}-${{ matrix.jna-arch }})'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        jna-os-type: [ linux, win32, darwin ]
        jna-arch: [ x86, x86-64 ]
        action-platform: [ x86, x64 ]
        include:
          - os: ubuntu-latest
            jna-os-type: linux
          - os: windows-latest
            jna-os-type: win32
          - os: macos-latest
            jna-os-type: darwin
          - jna-arch: x86
            action-platform: x86
          - jna-arch: x86-64
            action-platform: x64

    steps:
      - name: Report tool versions
        run: |
          echo "Architecture: $(arch)"
          echo "GCC version: $(gcc --version | head -n1)"
          echo "GCC target architecture: $(gcc -dumpmachine)"
          echo "CMake version: $(cmake --version | head -n1)"
        shell: bash

      - name: Set up GCC
        if: ${{ runner.os == 'Linux' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: ${{ matrix.action-platform }}

      - name: Set up MinGW
        if: ${{ runner.os == 'Windows' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.action-platform }}

      - name: Report GCC version (take 2)
        run: |
          echo "GCC installed as: $(which gcc)"
          echo "GCC version: $(gcc --version | head -n1)"
          echo "GCC target architecture: $(gcc -dumpmachine)"
        shell: bash
